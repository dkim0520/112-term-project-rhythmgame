####
# TP RhythmPlatform
####
import sys
import pygame
from character import Character
from Platform import Platform
import osuDataParser
###
# initialization
###
import pygame

###Framework obtained from Lukas Peraza http://blog.lukasperaza.com/getting-started-with-pygame/
class PygameGame(object):

    def init(self):
        self.state = "Start Menu" #different games states for different modes

        Character.init()
        character = Character(self.width/2, self.height/2)
        self.characterGroup = pygame.sprite.GroupSingle(character)

        Platform.init()
        platform = Platform(self.width, self.height)
        self.platformGroup = pygame.sprite.Group(platform)

        self.startFont = pygame.font.SysFont('Helvetica', self.width//8)

    def mousePressed(self, x, y):
        pass

    def mouseReleased(self, x, y):
        pass

    def mouseMotion(self, x, y):
        pass

    def mouseDrag(self, x, y):
        pass

    def keyPressed(self, keyCode, modifier):
        if keyCode == pygame.K_p and self.state == "Start Menu":
            self.state = "Game State"
            Character.init()
            character = Character(self.width/2, self.height/2)
            self.characterGroup = pygame.sprite.GroupSingle(character)
            Platform.init()
            platform = Platform(self.width/2, self.height/2 + 25)
            self.platformGroup = pygame.sprite.Group(platform)


    def keyReleased(self, keyCode, modifier):
        pass

    def timerFired(self, dt):
        if self.state == "Lost": return
        self.timesFired += 1
        self.platformGroup.update(self.isKeyPressed, self.width, self.height)
        self.characterGroup.update(self.isKeyPressed, self.width, self.height)
        if self.timesFired % 50 == 0: #adds platforms every so often
            self.platformGroup.add(Platform(self.width, self.height/2 + 25))
        if self.timesFired % 50 == 25:
            self.platformGroup.add(Platform(self.width, self.height/2 - 25))

        for character in pygame.sprite.groupcollide(
            self.characterGroup, self.platformGroup, False, False):
            # checks collisions with platforms and modifies character accordingly
            character.isJump = False
            character.onPlatform = True
            for platform in pygame.sprite.groupcollide(self.platformGroup, self.characterGroup, False, False):
                if character.y < platform.y:
                    character.y = platform.y
                if character.onPlatform:    
                    character.y = platform.y - 35
                    character.velocity = 0 
                    character.angle = 90

        for platforms in self.platformGroup:
            if platforms.x < 0:
                self.platformGroup.remove(platforms)

        for character in self.characterGroup:
            if not character.isJump and self.state == "Game State":
                character.onPlatform = False
            if character.y > self.height:
                self.state = "Lost"

    def redrawAll(self, screen):
        if self.state == "Start Menu":
            screen.fill((0, 255, 0))
            screen.blit(self.startFont.render('PyRhythm Platformer', True, 
                                              (255,0,0)), (0, 0))
        if self.state == "Game State":
            self.characterGroup.draw(screen)
            self.platformGroup.draw(screen)
        if self.state == "Lost":
            screen.fill((255, 0, 0))
            screen.blit(self.startFont.render("Failed!", True, (0, 0, 0)), 
                        (self.width/2 - 100, self.height/2 - 100))

    def isKeyPressed(self, key):
        ''' return whether a specific key is being held '''
        return self._keys.get(key, False)

    def __init__(self, width=600, height=400, fps=50, title="PyRhythm Platformer"):
        self.width = width
        self.height = height
        self.fps = fps
        self.title = title
        self.timesFired = 0
        pygame.init()

    def run(self):

        clock = pygame.time.Clock()
        screen = pygame.display.set_mode((self.width, self.height))
        # set the title of the window
        pygame.display.set_caption(self.title)

        # stores all the keys currently being held down
        self._keys = dict()

        # call game-specific initialization
        self.init()
        playing = True
        while playing:
            time = clock.tick(self.fps)
            self.timerFired(time)
            for event in pygame.event.get():
                if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
                    self.mousePressed(*(event.pos))
                elif event.type == pygame.MOUSEBUTTONUP and event.button == 1:
                    self.mouseReleased(*(event.pos))
                elif (event.type == pygame.MOUSEMOTION and
                      event.buttons == (0, 0, 0)):
                    self.mouseMotion(*(event.pos))
                elif (event.type == pygame.MOUSEMOTION and
                      event.buttons[0] == 1):
                    self.mouseDrag(*(event.pos))
                elif event.type == pygame.KEYDOWN:
                    self._keys[event.key] = True
                    self.keyPressed(event.key, event.mod)
                elif event.type == pygame.KEYUP:
                    self._keys[event.key] = False
                    self.keyReleased(event.key, event.mod)
                elif event.type == pygame.QUIT:
                    playing = False
            screen.fill((255, 255, 255))
            self.redrawAll(screen)
            pygame.display.flip()

        pygame.quit()

PygameGame().run()